<?php

//-------------------------------------------
//-------------- P-Space HOOKS --------------
//-------------------------------------------

function pspace_lights_menu()
{
$stoixeia=array();

$stoixeia['lights']=array(
	'title'=> t('Lights'),
	'page callback' => 'lights_overview',
	'access callback'=>TRUE,
	'menu_name'=> 'main-menu',
	'weight'=> 2,
);

return $stoixeia;
}

function pspace_lights_permission() {
  
  $perm_array= array(
    'open/close_lights' => array(
      'title' => t('Open/Close lights'), 
    ),
  );
	
  return $perm_array;
}

function pspace_lights_init() {
 
	drupal_add_css( drupal_get_path('module', 'pspace_lights') . '/pspace_lights.css', array('group' => CSS_THEME ,  'type' => 'file'));

}


//-------------------------------------------
//-------------- P-Space PAGES --------------
//-------------------------------------------


function lights_overview()
{
$rarray=array();

$testbed = variable_get_value('pspace_rest');

$node_pref = variable_get_value('pspace_node_prefix');
$cap_pref = variable_get_value('pspace_capability_prefix');
$route = variable_get_value('pspace_virtual_routing_xml');

$websocket = variable_get_value('pspace_websocket');
$ws_host = variable_get_value('pspace_websocket_host');

$plan=variable_get_value('pspace_image');

$main_light = "ceilinglight"; // ceilinglamp#: 1,2... if more than 1 divide opacity
$lamp = "desklamp"; // desklamp#: 1,2...

//get status
$json=file_get_contents("$testbed/status/json");
$status=get_object_vars(json_decode($json));


//get routing xml
$xml = simplexml_load_file($route);
$vars=get_object_vars($xml);

//simvasi:
//ROOM# routing : $vars['room'][#-1]
//drupal_set_message("<pre>".print_r($vars['room'][0],TRUE)."</pre>");

$shapes="";
foreach ($status as $key=>$values) {

	$cleankey=str_replace($node_pref,"",$key);
	if(substr($cleankey,0,8)=="virtual:"){

		$room=str_replace("virtual:","",$cleankey);
		$room_id=str_replace("ROOM","",$room);

		foreach($values as $v_capabilities){
			$temp=get_object_vars($v_capabilities);	
			$vcap[str_replace($cap_pref,"",$temp['capability'])]=$temp['reading'];
			unset($temp);
		}
		//drupal_set_message("<pre>".print_r($vcap,TRUE)."</pre>");

		$count=$vars['room'][$room_id-1]->route->count();
		$xml_data=get_object_vars($vars['room'][$room_id-1]);

		$lights=0;
		$lamps=0;

		$main_switches="";
		$desk_switches="";

		//make json_object   &&  switches 
		for ($i=0;$i<$count;$i++){

			if (substr($xml_data['route'][$i]->capability , 0 ,strlen($main_light)) == $main_light){
				$lights++;
				$dest=get_object_vars($xml_data['route'][$i]->destination);
				$json_obj[$room][$xml_data['route'][$i]->capability."_node"]=$dest['node'];
				$json_obj[$room][$xml_data['route'][$i]->capability."_capability"]=$dest['capability'];

				$temp2=get_object_vars(json_decode(file_get_contents("$testbed/node/".$node_pref.$dest['node']."/capability/".$cap_pref.$dest['capability']."/latestreading/json")));
				$reading=$temp2['readings'][0]->reading;
				$json_obj[$room][$xml_data['route'][$i]->capability."_light"]=$reading;

				$map[$dest['node']][$dest['capability']."_virtual"]=$room;
				$map[$dest['node']][$dest['capability']."_capability"]=(string) $xml_data['route'][$i]->capability;


				if ($reading)
					$main_switches.="<img src=\"sites/all/themes/newswitch1.png\" height=\"100\" id=\"$room"."_".$xml_data['route'][$i]->capability."\" onclick=\"switched_off(this.id)\" >\n";
				else
					$main_switches.="<img src=\"sites/all/themes/newswitch0.png\" height=\"100\" id=\"$room"."_".$xml_data['route'][$i]->capability."\" onclick=\"switched_on(this.id)\" >\n";

//				$main_switches.="<img src=\"sites/all/themes/newswitch0.png\" onclick = \"activate(0,4)\" title=\"ROOM4\" id= \"myswitch4\" alt=\"switch\" height=\"100\" width=\"100\"/>\n";

			}
			else if (substr($xml_data['route'][$i]->capability , 0 ,strlen($lamp)) == $lamp){
				$lamps++;
				$dest=get_object_vars($xml_data['route'][$i]->destination);
				$json_obj[$room][$xml_data['route'][$i]->capability."_node"]=$dest['node'];
				$json_obj[$room][$xml_data['route'][$i]->capability."_capability"]=$dest['capability'];

				$temp2=get_object_vars(json_decode(file_get_contents("$testbed/node/".$node_pref.$dest['node']."/capability/".$cap_pref.$dest['capability']."/latestreading/json")));
				$reading=$temp2['readings'][0]->reading;
				$json_obj[$room][$xml_data['route'][$i]->capability."_light"]=$reading;

				$map[$dest['node']][$dest['capability']."_virtual"]=$room;
				$map[$dest['node']][$dest['capability']."_capability"]=(string)$xml_data['route'][$i]->capability;

				if ($reading)
					$desk_switches.="<img src=\"sites/all/themes/on2.png\"  height=\"100\" id=\"$room"."_".$xml_data['route'][$i]->capability."\" onclick=\"switched_off(this.id)\" >\n";
				else
					$desk_switches.="<img src=\"sites/all/themes/off2.png\" height=\"100\" id=\"$room"."_".$xml_data['route'][$i]->capability."\" onclick=\"switched_on(this.id)\" >\n";

			}
		}
		$json_obj[$room]['lights']=$lights;




//making rectangles
		if ($lights){
			$maxlight=0.688;
			$perlight=$maxlight/$lights;
			//drupal_set_message($perlight);
			$current=0;
			for($i=1;$i<=$lights;$i++)
				$current+=($json_obj[$room][$main_light.$i."_light"]*$perlight);

			//drupal_set_message($current);

			if ( isset($vcap['x']) && isset($vcap['y']) && isset($vcap['height']) && isset($vcap['width']) ){
				$shapes.='<rect x="'.$vcap['x'].'" y="'.$vcap['y'].'" height="'.$vcap['height'].'" width="'.$vcap['width'].'" id="'.str_replace('virtual:',"",$cleankey).'" style="opacity: '.($maxlight-$current)."\" >\n<title>".str_replace('virtual:',"",$cleankey)."</title>\n</rect>\n";
			}

		}

		//TODO $shapes.= v2 (room5, desk lamps_ )

		if ($lights+$lamps){
			$sw_header[$room]['data']=$room;
			$switches[$room_id]['data']=$main_switches.$desk_switches;
		}

		//unset($json_obj);
		unset($vcap);
	}
}
//------- SVG -------//

//encode json objects
$json_en=json_encode($json_obj);
$map_en=json_encode($map);
//drupal_set_message("<pre>".print_r($json_obj,TRUE)."</pre>");
//drupal_set_message("<pre>".$json_en."</pre>");
//drupal_set_message("<pre>".print_r($map,TRUE)."</pre>");
//drupal_set_message("<pre>".$map_en."</pre>");

//TODO write json_en/map_en in javascript objects.
//jQuery.parseJSON( jsonString );
//http://jsonviewer.stack.hu/

$image_size=getimagesize($plan);
//width: $image_size[0]
//height: $image_size[1]


$svg_head="<?xml version=\"1.0\"?>\n<svg width=\"".$image_size[0]."\" height=\"".$image_size[1]."\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n";
$meta="<metadata id=\"metadata3045\">image/svg+xml</metadata>\n";
$g="<g>\n<title>P-Space</title>\n";

$image="<image y=\"0\" x=\"0\" id=\"pspace\" xlink:href=\"".$plan."\"width=\"".$image_size[0]."\" height=\"".$image_size[1]."\" />\n";

$g2="</g>\n";
$svg_foot="</svg>\n";


$markup= $svg_head.$meta.$g.$image.$shapes.$g2.$svg_foot;

 $rarray['svg']= array(
  '#markup' => $markup, 
  '#prefix' => "<div class=\"svg\" >",
  '#suffix' => "</div>",
  );

//-----end SVG -----//


//-------javascript functions------//

$js_header="<script type=\"text/javascript\">";
$js_footer="</script>";

//objects

$objects="";
$objects.="var rooms=$json_en \n";
$objects.="var map=$map_en \n";

$rarray['script_vars']= array(
  '#markup' => $js_header.$objects.$js_footer, 
 );

//switched_on/switched_off: change the stage
$script_on="";
$script_off="";


//alert(rooms.ROOM1.lights);
//document.getElementById(id).src=
//document.getElementById(id).click=\"switched_off(this.id)\";
/*

//document.getElementById(id).src=

alert(capability.startsWith(\"$main_light\"));


//	document.getElementById(id).onclick=\"switched_off(this.id)\";
//	jQuery(this).click(this.id,handler(\"switched_off\"));
	jQuery('#'+id).unbind('click');

	document.getElementById(id).onclick= switched_off;addEventListener

<img src="sites/all/themes/off2.png" height="100" id="ROOM1_desklamp1" onclick="switched_on(this.id)">

*/
//switched on


$script_on.="

function switched_on(id){

	var temp=id.split(\"_\");
	room=temp[0];
	capability=temp[1];



	document.getElementById(id).onclick=function() { switched_off(this.id); };
	if (capability.substring(0,\"$main_light\".length)== \"$main_light\"){
		document.getElementById(id).src=\"sites/all/themes/newswitch1.png\";
	}
	else{
		document.getElementById(id).src=\"sites/all/themes/on2.png\";
	}

}";

$script_off.="\n
function switched_off(id){\n

	var temp=id.split(\"_\");
	room=temp[0];
	capability=temp[1];

	document.getElementById(id).onclick=function() { switched_on(this.id); };

	if (capability.substring(0,\"$main_light\".length)== \"$main_light\"){
		document.getElementById(id).src=\"sites/all/themes/newswitch0.png\";
	}
	else{
		document.getElementById(id).src=\"sites/all/themes/off2.png\";
	}

}";

$rarray['script_alter_page']= array(
  '#markup' => $js_header.$script_on.$script_off.$js_footer, 
 );






if (user_access("open/close_lights")){

sort($sw_header);
ksort($switches);

//maybe show them in table (border="0")
$rarray['switches_test'] = array(
	'#theme' => 'table',
	'#header'=> $sw_header,
	'#rows' => array($switches),
	'#attributes'=> array(
			'id' => 'simple_table'
			),
	'#sticky' => false,
);


}

return $rarray;
}

<?php

//-------------------------------------------
//-------------- P-Space HOOKS --------------
//-------------------------------------------

function pspace_graph_menu()
{
$stoixeia=array();

$stoixeia['graph']=array(
	'page callback' => 'show_graph',
	'page arguments' => array(1,2,3),
	'access callback'=>TRUE,
	'type' => MENU_CALLBACK ,
	'menu_name'=> 'main-menu',
	'weight' => '7'
	);

return $stoixeia;
}


function pspace_graph_init() {

  drupal_add_js(drupal_get_path('module', 'pspace_graph') . '/js/highcharts.js');
  drupal_add_js(drupal_get_path('module', 'pspace_graph') . '/js/highcharts.src.js');
  drupal_add_js(drupal_get_path('module', 'pspace_graph') . '/js/themes/gray.js');

}


//-------------------------------------------
//-------------- P-Space PAGES --------------
//-------------------------------------------


function show_graph($node,$capability,$maxRows)
{
$rarray=array();

if ($maxRows==NULL)
	$maxRows=100;
else if ($maxRows<10)
	$maxRows=10;

if (($node!=NULL)&&($capability!=NULL)){

$testbed = variable_get_value('pspace_rest');

$node_pref = variable_get_value('pspace_node_prefix');
$cap_pref = variable_get_value('pspace_capability_prefix');


$json=file_get_contents("$testbed/status/json");
$status=get_object_vars(json_decode($json));


$found=0;
if(isset($status[$node_pref.$node])) {
	foreach ($status[$node_pref.$node] as $node_readings){
		if ($capability == str_replace($cap_pref,"",$node_readings->capability))
			$found=1;
	}

if ($found){


//-------javascript functions------//
$js_header="\n<script type=\"text/javascript\">\n";
$js_footer="\n</script>\n";
$charts="";

$charts.="
function displayChart(){
	var chart;
	chart = new Highcharts.Chart({
		chart: {
                    renderTo: 'container',
                    defaultSeriesType: 'spline',
                    zoomType: 'x',
                    spacingRight: 20
                },
                title: {
                    text: 'Readings Chart Testbed : '
                            .concat('P-Space')
                            .concat(' Node : ')
                            .concat('$node')
                            .concat(' Capability : ')
                            .concat('$capability') 
                },
                subtitle: {
                    text: document.ontouchstart === undefined ?
                            'Click and drag in the plot area to zoom in' :
                            'Drag your cursor over the plot to zoom in'
                },
                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 150,
                    maxZoom: 1000
                },
                yAxis: {
                    title: {
                        text: 'Reading'
                    },
                    min: 0,
                    startOnTick: false,
                    showFirstLabel: false
                },
                tooltip: {
                    shared: true
                },
                legend: {
                    enabled: false
                },
	      plotOptions: {
		 series: {
		    lineWidth: 1,
		    marker: {
		       enabled: false,
		       states: {
		          hover: {
		             enabled: true,
		             radius: 5
		          }
		       }
		    }
		 }
	      },
               series: [
                  {
                        name: 'Reading value (UNIT,DATATYPE)',
                        data: [";

$data="[\n";

$tabdelimited = file_get_contents("$testbed/node/$node_pref".$node."/capability/$cap_pref".$capability."/tabdelimited/limit/".$maxRows);

$lines = explode("\n", $tabdelimited, $maxRows);
unset($lines[count($lines)-1]);

$firstRow = explode("\t", $lines[0]);
$charts.="                                 [".$firstRow[0]." , ".$firstRow[1]."]";
unset($lines[0]);

foreach ($lines as $thisLine) {
  $row = explode("\t", $thisLine);
  $charts.=" ,\n                                 [".$row[0]." , ".$row[1]."]";
}

$charts.="
			      ]
                  }
               ]
	});
}\n";

$charts.="jQuery(document).ready(function() {displayChart();});";

$rarray['script_charts']= array(
  '#markup' => $js_header.$charts.$js_footer, 
  '#suffix' => "<div id=\"container\"></div>",
 );

}//end (found)
else{
	drupal_set_message('Invalid Capability','error');
}

}//end (isset)
else{
	drupal_set_message('Invalid Node','error');
}


}//end node/cap

return $rarray;

}

